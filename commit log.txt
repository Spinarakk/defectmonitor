September 6
- Fixed up the capture code to work with taking single shots and with the trigger
- Changed the camera and trigger acquisition to use the QThreadPool as it takes a bit of time to execute
- Fixed the capture single image function
- Fixed the run capture image function
- Moved the constant polling of the trigger to its own worker thread to keep the main GUI functional
- Repurposed the image converter to also use the QThreadPool and to also open the folder when finished 
- Added a pause button that just stops the timer but doesn't outright reset it

September 1
- Reimplemented the image viewer using QGraphicsView as a basis
- Consolidated 4 separate image views for each tab into one that just changes image
- Allows the user to right click hold to zoom and left click to pan the image
- Continued porting forward the code for the newer Python and PyQt versions
- Image viewer half working, layer number not correct

August 30
- Continued porting forward the code and testing for stability and for bugs
- Started remodifying and finalizing the design of the UI starting with the MainWindow
- Consolidated the four separate sliders and buttons into one master slider that controls the currently displayed tab's display
- Completely integrated the image capture window into the MainWindow and removed the dialog
- Rejigged the code to work on the new modified window
- Created a separate python file that contains the PyQt multithreading functions
- Removed the folder monitor qthread and re-implemented it as a normal function in the MainWindow that is activated using a QTimer every second

August 29
- Started porting the code forward from Python 2.7.13 to Python 3.6.2
- Ported the code forward from PyQt4 4.11.4 to PyQt5 5.9 
- Investigated ways to streamline the installation process by limiting installation to just the Python language executable and a bunch of pip installation wheels
- Started looking into improving the multithreading by using qThreadpool

August 28
- Added right click context menus to the 4 tab labels that allow the user to open the image in their folder or in another image viewer
- Copied the timer and continue from checkbox from the ImageCapture dialog window to the MainWindow
- Changed the resizeEvent method from monitoring the label to instead the MainWindow's resizeEvent so that the minimize and maximize buttons cause the picture to resize correctly

August 25
- Integrated the calibration parameters into the JSON config file
- Split the image processing transformation sequence into their own individual methods
- Fixed up the window modality and saves the window state and geometry when closing the windows
- Closing the MainWindow now prompts the user to save their build if it wasn't saved
- Fixed the tab order of all the dialog windows
- Changed a lot of the status messages associated with the SliceConverter

August 24
- Changed a lot of code to only load the required variables rather than the entire config file
- Modified the JSON config file into a nested form and grouping similar settings together for improved readability
- Updated the UI with more features and functions such as a recent builds action
- Fixed up the New Build window by finalizing what parameters appear on it
- Added a Settings function that essentially opens the New Build dialog to let the user change any of the initial settings
- Removed the Notification Settings dialog window and the associated code
- Turned majority of the windows into modeless windows that save their positions and cannot be re-opened

August 22
- Restructured the entire Slice Converter code to run slightly more efficiently
- Drawing contours for loop changed to a while loop to take into account the highest number of layers

August 21
- Modified the .cli conversion code to work off of the number of vectors given in the .cli file
- This is to prevent any command indexes (128, 129) that appear as vectors screwing up the layers
- Started cleaning up code by removing unncessary comments

August 17
- Modified the program to work with the defect analysis on the printer machine
- Added a camera and trigger check to the MainWindow that will poll both the camera and the trigger when a new build is created or a build is loaded
- Integrated the ImageCapture functionality into the MainWindow using RUN and STOP buttons
- Removed unnecessary OpenCV processing group box from the MainWindow
- Created a default config file to initially load from
- Created a Save Build action and implemented functionality
- Modified the Open Build method to work by replacing the contents of config.json with the new config file

August 16
- Changed the contour dictionaries into lists that can be read line for line instead of needing to be entirely loaded into memory to read from
- Cuts down on memory usage
- Fixed up drawing of all the contours on the one image
- Started integrating John's Defect Analysis code into the program
- Modified the Defect Processing button to execute his code
- Started modifying the MainWindow and NewBuild to be more accessible to users wanting to start a new monitoring build

August 15
- Tested .cls conversion code on more complex parts
- Doesn't work properly as of this revision, code only works on single contour parts
- Created a dialog window for the overlay adjustment options
- Modified the way the slice contour drawing works
- Added combine contours to combine all the contours onto the one image

August 14
- Slightly adapted the .cli conversion code to the .cls file
- Recreated the structure of a .cli file using the .cls file data
- Cleaned up and removed a lot of the previous slow code
- .cls conversion code now runs much faster and doesn't use as much memory

August 11
- Added functionality to the Position Adjustment buttons to allow the user to make transformation changes to the overlay image in real time
- Move this group box into a separate window as there were too many buttons to fit comfortably on the MainWindow
- Added options to stretch only in one direction and back
- Started to look at the .cls file and getting it working like the .cli converter

August 9
- Tested the SliceConverter code on multiple parts of varying complexity
- Set a specific folder to save the contours to
- Used DrawContours to fill in the contours rather than the FillPoly XOR method
- Fixed up the binary code to work when CommandIndex 128 and 129 are encountered twice
- Changed the Fill Polygon button to a Fill Contours button
- Calculated an offset in pixels to shift the contours to match the build platform and the platform in MAGICS
- Saved the scale factor to the config.json file
- Improved the binary logic when encountering numbers the same as the command indexes to ignore them if part of polyline or layer count
- Moved all the files and folders to the SSD to test out disk speed
- Added more status updates and progress updates to the conversion code

August 8
- Converted the .cli binary into ascii
- Drew polygons and contours of each layer of the test .cli slice files
- Works on all different shapes and for any number of contours, even ones nested in larger contours
- Implanted the code back into the SliceConverter within the main program

August 7
- Tested the .cli file to see how it works and how to convert from binary to ascii
- Created a bunch of .cli test files and output them as ascii

August 4
- Moved the conversion to contours method to the SliceConverter method
- Wrote the contours as an image file to a folder
- Added the overlaying of the part contour images over any other image
- Fixed image capture saving images
- Recoded the stopwatch function to also count for idle time
- Program works on the 3D printing machine, restarted taking pictures again

August 2
- Ported everything to their 64bit version counterparts
- Managed to somehow run and compile the pypylon under 64bit to work with python 64bit
- Implemented scrolling through image feature
- Implemented Go button to jump directly to layer
- Changed the list of images, layer ranges, label names etc. into an easily accessible dictionary
- Rewritten the FolderMonitor code to run in a for loop for all five folders
- Added a separate config item specifically for the build folder
- Moved the image folder correction to the NewBuild method in dialog_windows
- Restructed a lot of code to use the new dictionary
- Error checking if the image folder is suddenly empty
- Split a few functions into their own method to be reused and for clarity
- Added checking for images
- Fixed a lot of bugs with functionality
- Recoded the Image Capture window to work with the new folder structure
- Removed the Apply Correction checkbox from the Image Capture window and replaced it with a Time Idle stopwatch, which displays the time if an image isn't captured (not programmed yet)

July 31
- Semi-completely revamped the MainWindow layout to allow a larger window to display the images
- Replaced the scrollbars with sliderbars with up down buttons as scrollbars inverted controls don't work as expected
- Removed a couple of display options as they are unncessary for end-users
- Recoded a lot of the MainWindow code to account for the new changes and removed buttons
- Reorganized a lot of the MainWindow code to make it clearer
- Removed the saving of the undistorted and perspective corrected images to save time
- Removed the Initialize button and its functionality as it doesn't actually do anything substantial anymore
- Moved the import pypylon statement into the dialog_windows ImageCapture class so that the program can be run on machines without the Basler Pylon software installed and be used for its other functions
- Image Capture tool cannot be used unless Basler Pylon is installed
- Fixed aspect ratio scaling of the displaay window
- Readded the Image Viewer tab to show images as they are captured
- Split the update_display1 method into 5 individual methods for each of the 5 tabs so that the one method doesn't update 5 images everytime one of the tab images needs to change
- Removed the simulation checkbox and simulation flags
- Changed when the image folders are created to when a new build is created
- Moved image folder to a build folder
- A new build needs to be created in order to use certain features
- Changed the working directory button into an image folder save location button

July 28
- Finally obtained a bunch of scan and coat images from a real build
- Problem is there was a problem with the build and had to be stopped
- Started recoding the main display to change in accordance to the scrollbar value and the set layer value
- Scrollbar range and layer range also changes in accordance to the number of images in the scan and coat image folder

July 27
- Set up another local machine to run the program on
- Installed TeamViewer to remotely access the computer which will be in the laser printer
- Created a batch file that will run the program without needing an IDE
- Implemented notification sending into the main program
- Function that sends a notification if an image isn't captured within a time period
- Took more calibration pictures to use for the homography matrix
- Finialized the camera parameters to be used for the meantime to calibrate the taken images

July 26
- Cleaned up the calibration results window
- Pressing the button closes the existing window and opens a new one
- The window remembers it's last position
- Took 30 calibration images to get new calibration parameters
- Tested on sample image to try and get the best settings
- Separated the rotate image process from the crop process into its own method
- Tested various combinations of calibration images and settings to find the best result

July 25
- Modified all the string image name structures
- Separated calibration results to its own window that pops up after calibration is done
- Continued implementing the camera calibration code into the main program
- Included checkboxes for saving chessboard and undistorted images
- Saved the calibration parameters in a different way that is more readable
- Added some QOL features

July 21
- Fixed a KeyError with the maximum number of layers
- Found some major issues
	- .cls files larger than 30 mb appears to cause memory errors
	- Drawing more than one contour doesn't appear to work properly
- Updated the Readme with an installation guide to run the program on a fresh machine
- Started implementing the camera calibration code into the main program

July 20
- Went over the calibration code to see how it works
- Current calibration doesn't produce a straight edge of the platform
- Tried various methods and took lots of pictures of a checkboard image to try and get more accurate matrix and coefficients

July 18
- Tested and tweaked the program on the printing machine
- Captured a bunch of images to start testing OpenCV code on
- Left the machine and program running for a couple of hours to see how reliable the program is
- Fixed a couple issues with replacing strings and saving the current working directory
- Renamed a lot of variables to make more sense in what they contain
- Fixed an issue with the clahe if a grayscale image is inputted rather an a bgr image
- Fixed an issue with the working directory using \\ and replaced it with /
- Fixed an issue with replace strings not working as intended
- Fixed an issue with the stopwatch minutes not lopping after 60

July 17
- Put the desktop back into the printing machine
- Fixed a lot of the slice converter code to work for only one slice file
- Went through and comprehended more code

July 14
- Spent time trying to figure out how the cls converter works
- Modified it so it takes one input cls file and converts it
- Modified the New Build dialog to allow user to select a specific calibration and slice file to work with (for simulation purposes)
- Tested out various versions of simple slice files (boxes etc.)

July 13
- Added closeEvent methods to all the dialog windows so that the program knows what to do if the user presses the X button
- Linked the settings to the config.json file
- Fixed the Display Image and Apply Correction checkboxes
- CLAHE correction using random pictures appears to be buggy not sure why at the moment
- Setup the Monash box with Python, PyCharm, PyQt and Basler SDK and the program runs no issues
- Further increased my understanding of the calibration code

July 11
- Another quick runthrough of the comments (main_window.py) for consistency and accuracy
- Added additional comments throughout the code
- Fixed up the MainWindow Image Viewer
- Added an error checker for the config.json file in case it gets wiped
- Cleaned up the camera calibration code to remove all unneeded commented code
- Added a few settings to the Camera Calibration UI for changeable variables
- Tested some other calibration code

July 10
- Did a quick runthrough of the comments (main_window.py) for consistency and accuracy
- Added additional comments throughout the code
- Fixed up the serial port issue outlined on July 7
- Moved around a lot of the code so the QThreads work properly
- Pressing the Stop button now waits for a running timeout and the QThread to finish before allowing user to use the panel
- Consolidated all the captured images to one root folder and its subfolders
- Created an image converter button that allows the user to easily convert an image using stored calibration values
- Created a new tab on the MainWindow widget that allows the user to view the captured images on the window itself

July 7
- Did some testing of the Basler camera using the pylon Viewer to try out different camera settings
- Checking to see which have an appreciable affect on the output picture, though most of them don't
- Added/Removed some settings from the UI and tested their functionality
- Fixed a UI window parent issue where new dialogs were creating a separate taskbar entry and clicking the main window when it is not the focus when another dialog is open doesn't cause the window to be the focus in Windows
- ISSUE: Clicking the stop button doesn't terminate the QThread
- Appears to be because of the serial readline reading it the and holding it there
- Adding a timeout to the serial port appears to fix this issue, but there still lie other issues such as premature termination of the Thread
- Will need to fix

July 5
- Separated the dialog window code to its own python module to improve readibility
- Configured the settings window to work properly (apply button)
- Saves the settings to the config.json file so that future iterations use the same settings
- Added error checking for the exposure time value
- Added more elements to the config.json file to remember more values across programs
- Added a cleanup button that allows the user to specify whether to delete created folders or not
- Moved the capture and run code blocks into their respective modules
- Capture and Run buttons work as intended
	- ISSUE: Run doesn't wait properly, and keeps capturing images if triggered repeatedly during wait time

July 3
- Removed the hardware trigger from the 3D machine and moved it to the office
- Setup the camera and hooked it up to the laptop
- Wrote some simple code to take pictures and set the settings (Mono8)
- Tested hardware trigger (works properly)
- Doesn't appear to require the grey cable
- Need to refine the code to work with threads

June 30
- Created an Image Capture and a Camera Settings window
- Initialized them and connected them to buttons
- Added some basic functionality
- Coded a timer to work with the Run button (extra_functions.py)

June 29
- Added functionality to the export image menu option, allowing the user to save the currently displayed image to a location on disk
- Created a new window specifically for slice converter
	- Added basic functionally but haven't connected it to the function yet

June 28
- Updated the README.txt with more up to date information about the program goals
- Created a new window specifically for camera calibration
	- Scans through the folder looking for specific calibration images
	- Currently only runs the calibration using the one specific image
	- Will change to run on a bunch of images once I acquire those images
- Changed the build_GUI.bat to use the current working directory
- Added pictures to the Defect Analyzer tab
- Copied some of Gilbert's OpenCV processing code to the image_processing method
- Allows user to process the current displayed picture using test OpenCV code and display it on the UI
- Wrote some random OpenCV processes to test out the functionality of the Defect Analyzer tab

June 27
- Removed the camera calibration process from the initialization process
	- Unncessary as camera calibration onlny needs to be done once to get the camera parameters, which should be valid for all future images
- Camera calibration process implemented as a separate button accessible from the main UI
- Clicking on it allows the user to specify a folder of checkboard images to calibrate the camera, which produces a .dat file of 24 values
- Rewrote the image_processing run method to be shorter and "smarter" (using loops)

June 26
- Converted the image pre-processing code into a qthread, allowing the user to play with the UI while image processing is running
- Reverted the main window size to the original ratio
- Renamed several variable and class names to be more descriptive and to allow the programmer to follow the flow easier
- Recoded certain functions (Mainly the initialize function, processing now runs much faster)
- Converted the camera calibration code into its own qthread
- Tried rewriting camera calibration code
- Entire program does not work as of today

June 22
- Renamed a bunch of variables and added more comments
- Cleaned up the previous day's code, removing unncessary parts
- Fixed scaling issue on the UI, UI now scales the main display while keeping all other elements the same size
- Fixed the aspect ratio of the display window, now maintains a fixed aspect ratio of 16:9

June 21
- Fixed program errors, program now runs properly and displays processed images
- Added a progress meter to the slice conversion
- Fixed a lot of the interactable UI elements by enabling/disabling them at appropriate events
- Fixed more variable names, removed unneeded variables
- Added ToolTips to the Position Adjustment buttons
- Added toggle overlay feature
- Added coat image processing alongside the scan image processing to its respective tab in the Main Window

June 20
- Renamed main to main_window
- Revamped UI in Qt Designer, moved buttons around, added space for newer buttons, added a simulation button and a group box for various OpenCV functions
	- ISSUE: Can't use layouts to make the UI elements scalable (Can't maximize/change window size)
- Added a sample .cli file to the main folder
- Copied more lines of code over from the backup
	- Slice Parse
	- Calibration
	- Main Window UI
- Code still doesn't run at all, need to copy more functionality
- Missing a lot of comments at the moment

June 16
- Added image_capture and image_processing python files
- Initialization of the sample images
- Wrote lines to fix image distortion, perspective warp, crop and CLAHE
- Used QThreading for multithreading so the GUI and the background processes can run simultaneously
- Added cls files and folders
- Added pypylon package, used for Basler SDK interaction

June 15
- Initial commit
- Setup necessary UI files and sample images
- Use as a base for revised script
- Added MainWindow and NewBuild constructor code
- Linked corresponding .py files
- Added a batch file to automatically convert the .ui files to .py files before running the rest of the script
- Linked the New Build... menu function
- Added .json config file to store configuration settings
- Created folders to store captured images
- Added exit cleanup functions that delete created folders during simulation